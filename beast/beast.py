# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_beast', [dirname(__file__)])
        except ImportError:
            import _beast
            return _beast
        if fp is not None:
            try:
                _mod = imp.load_module('_beast', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _beast = swig_import_helper()
    del swig_import_helper
else:
    import _beast
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class constellation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, constellation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, constellation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["s1"] = _beast.constellation_s1_set
    __swig_getmethods__["s1"] = _beast.constellation_s1_get
    if _newclass:
        s1 = _swig_property(_beast.constellation_s1_get, _beast.constellation_s1_set)
    __swig_setmethods__["s2"] = _beast.constellation_s2_set
    __swig_getmethods__["s2"] = _beast.constellation_s2_get
    if _newclass:
        s2 = _swig_property(_beast.constellation_s2_get, _beast.constellation_s2_set)
    __swig_setmethods__["p"] = _beast.constellation_p_set
    __swig_getmethods__["p"] = _beast.constellation_p_get
    if _newclass:
        p = _swig_property(_beast.constellation_p_get, _beast.constellation_p_set)
    __swig_setmethods__["last"] = _beast.constellation_last_set
    __swig_getmethods__["last"] = _beast.constellation_last_get
    if _newclass:
        last = _swig_property(_beast.constellation_last_get, _beast.constellation_last_set)

    def __init__(self):
        this = _beast.new_constellation()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _beast.delete_constellation
    __del__ = lambda self: None
constellation_swigregister = _beast.constellation_swigregister
constellation_swigregister(constellation)

class star(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, star, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, star, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _beast.star_x_set
    __swig_getmethods__["x"] = _beast.star_x_get
    if _newclass:
        x = _swig_property(_beast.star_x_get, _beast.star_x_set)
    __swig_setmethods__["y"] = _beast.star_y_set
    __swig_getmethods__["y"] = _beast.star_y_get
    if _newclass:
        y = _swig_property(_beast.star_y_get, _beast.star_y_set)
    __swig_setmethods__["z"] = _beast.star_z_set
    __swig_getmethods__["z"] = _beast.star_z_get
    if _newclass:
        z = _swig_property(_beast.star_z_get, _beast.star_z_set)
    __swig_setmethods__["mag"] = _beast.star_mag_set
    __swig_getmethods__["mag"] = _beast.star_mag_get
    if _newclass:
        mag = _swig_property(_beast.star_mag_get, _beast.star_mag_set)
    __swig_setmethods__["starnum"] = _beast.star_starnum_set
    __swig_getmethods__["starnum"] = _beast.star_starnum_get
    if _newclass:
        starnum = _swig_property(_beast.star_starnum_get, _beast.star_starnum_set)
    __swig_setmethods__["magnum"] = _beast.star_magnum_set
    __swig_getmethods__["magnum"] = _beast.star_magnum_get
    if _newclass:
        magnum = _swig_property(_beast.star_magnum_get, _beast.star_magnum_set)
    __swig_setmethods__["id"] = _beast.star_id_set
    __swig_getmethods__["id"] = _beast.star_id_get
    if _newclass:
        id = _swig_property(_beast.star_id_get, _beast.star_id_set)
    __swig_setmethods__["sigma_sq"] = _beast.star_sigma_sq_set
    __swig_getmethods__["sigma_sq"] = _beast.star_sigma_sq_get
    if _newclass:
        sigma_sq = _swig_property(_beast.star_sigma_sq_get, _beast.star_sigma_sq_set)
    __swig_setmethods__["px"] = _beast.star_px_set
    __swig_getmethods__["px"] = _beast.star_px_get
    if _newclass:
        px = _swig_property(_beast.star_px_get, _beast.star_px_set)
    __swig_setmethods__["py"] = _beast.star_py_set
    __swig_getmethods__["py"] = _beast.star_py_get
    if _newclass:
        py = _swig_property(_beast.star_py_get, _beast.star_py_set)

    def __init__(self):
        this = _beast.new_star()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _beast.delete_star
    __del__ = lambda self: None
star_swigregister = _beast.star_swigregister
star_swigregister(star)

class constellation_score(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, constellation_score, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, constellation_score, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalscore"] = _beast.constellation_score_totalscore_set
    __swig_getmethods__["totalscore"] = _beast.constellation_score_totalscore_get
    if _newclass:
        totalscore = _swig_property(_beast.constellation_score_totalscore_get, _beast.constellation_score_totalscore_set)
    __swig_setmethods__["oldid1"] = _beast.constellation_score_oldid1_set
    __swig_getmethods__["oldid1"] = _beast.constellation_score_oldid1_get
    if _newclass:
        oldid1 = _swig_property(_beast.constellation_score_oldid1_get, _beast.constellation_score_oldid1_set)
    __swig_setmethods__["oldid2"] = _beast.constellation_score_oldid2_set
    __swig_getmethods__["oldid2"] = _beast.constellation_score_oldid2_get
    if _newclass:
        oldid2 = _swig_property(_beast.constellation_score_oldid2_get, _beast.constellation_score_oldid2_set)
    __swig_setmethods__["newid1"] = _beast.constellation_score_newid1_set
    __swig_getmethods__["newid1"] = _beast.constellation_score_newid1_get
    if _newclass:
        newid1 = _swig_property(_beast.constellation_score_newid1_get, _beast.constellation_score_newid1_set)
    __swig_setmethods__["newid2"] = _beast.constellation_score_newid2_set
    __swig_getmethods__["newid2"] = _beast.constellation_score_newid2_get
    if _newclass:
        newid2 = _swig_property(_beast.constellation_score_newid2_get, _beast.constellation_score_newid2_set)
    __swig_setmethods__["id_map"] = _beast.constellation_score_id_map_set
    __swig_getmethods__["id_map"] = _beast.constellation_score_id_map_get
    if _newclass:
        id_map = _swig_property(_beast.constellation_score_id_map_get, _beast.constellation_score_id_map_set)
    __swig_setmethods__["scores"] = _beast.constellation_score_scores_set
    __swig_getmethods__["scores"] = _beast.constellation_score_scores_get
    if _newclass:
        scores = _swig_property(_beast.constellation_score_scores_get, _beast.constellation_score_scores_set)

    def __init__(self):
        this = _beast.new_constellation_score()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _beast.delete_constellation_score
    __del__ = lambda self: None
constellation_score_swigregister = _beast.constellation_score_swigregister
constellation_score_swigregister(constellation_score)


def load_db():
    return _beast.load_db()
load_db = _beast.load_db

def unload_db():
    return _beast.unload_db()
unload_db = _beast.unload_db

def compare_mag(s1, s2):
    return _beast.compare_mag(s1, s2)
compare_mag = _beast.compare_mag

def compare_totalscore(cs1, cs2):
    return _beast.compare_totalscore(cs1, cs2)
compare_totalscore = _beast.compare_totalscore
class star_query(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, star_query, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, star_query, name)
    __repr__ = _swig_repr
    __swig_setmethods__["oldstars"] = _beast.star_query_oldstars_set
    __swig_getmethods__["oldstars"] = _beast.star_query_oldstars_get
    if _newclass:
        oldstars = _swig_property(_beast.star_query_oldstars_get, _beast.star_query_oldstars_set)
    __swig_setmethods__["newstars"] = _beast.star_query_newstars_set
    __swig_getmethods__["newstars"] = _beast.star_query_newstars_get
    if _newclass:
        newstars = _swig_property(_beast.star_query_newstars_get, _beast.star_query_newstars_set)
    __swig_setmethods__["c_scores"] = _beast.star_query_c_scores_set
    __swig_getmethods__["c_scores"] = _beast.star_query_c_scores_get
    if _newclass:
        c_scores = _swig_property(_beast.star_query_c_scores_get, _beast.star_query_c_scores_set)
    __swig_setmethods__["winner_scores"] = _beast.star_query_winner_scores_set
    __swig_getmethods__["winner_scores"] = _beast.star_query_winner_scores_get
    if _newclass:
        winner_scores = _swig_property(_beast.star_query_winner_scores_get, _beast.star_query_winner_scores_set)
    __swig_setmethods__["winner_id_map"] = _beast.star_query_winner_id_map_set
    __swig_getmethods__["winner_id_map"] = _beast.star_query_winner_id_map_get
    if _newclass:
        winner_id_map = _swig_property(_beast.star_query_winner_id_map_get, _beast.star_query_winner_id_map_set)
    __swig_setmethods__["numoldstars"] = _beast.star_query_numoldstars_set
    __swig_getmethods__["numoldstars"] = _beast.star_query_numoldstars_get
    if _newclass:
        numoldstars = _swig_property(_beast.star_query_numoldstars_get, _beast.star_query_numoldstars_set)
    __swig_setmethods__["numnewstars"] = _beast.star_query_numnewstars_set
    __swig_getmethods__["numnewstars"] = _beast.star_query_numnewstars_get
    if _newclass:
        numnewstars = _swig_property(_beast.star_query_numnewstars_get, _beast.star_query_numnewstars_set)
    __swig_setmethods__["addedoldstars"] = _beast.star_query_addedoldstars_set
    __swig_getmethods__["addedoldstars"] = _beast.star_query_addedoldstars_get
    if _newclass:
        addedoldstars = _swig_property(_beast.star_query_addedoldstars_get, _beast.star_query_addedoldstars_set)
    __swig_setmethods__["addednewstars"] = _beast.star_query_addednewstars_set
    __swig_getmethods__["addednewstars"] = _beast.star_query_addednewstars_get
    if _newclass:
        addednewstars = _swig_property(_beast.star_query_addednewstars_get, _beast.star_query_addednewstars_set)
    __swig_setmethods__["numconst_rel"] = _beast.star_query_numconst_rel_set
    __swig_getmethods__["numconst_rel"] = _beast.star_query_numconst_rel_get
    if _newclass:
        numconst_rel = _swig_property(_beast.star_query_numconst_rel_get, _beast.star_query_numconst_rel_set)
    __swig_setmethods__["mapsize_rel"] = _beast.star_query_mapsize_rel_set
    __swig_getmethods__["mapsize_rel"] = _beast.star_query_mapsize_rel_get
    if _newclass:
        mapsize_rel = _swig_property(_beast.star_query_mapsize_rel_get, _beast.star_query_mapsize_rel_set)
    __swig_setmethods__["dbsize_rel"] = _beast.star_query_dbsize_rel_set
    __swig_getmethods__["dbsize_rel"] = _beast.star_query_dbsize_rel_get
    if _newclass:
        dbsize_rel = _swig_property(_beast.star_query_dbsize_rel_get, _beast.star_query_dbsize_rel_set)
    __swig_setmethods__["map_rel"] = _beast.star_query_map_rel_set
    __swig_getmethods__["map_rel"] = _beast.star_query_map_rel_get
    if _newclass:
        map_rel = _swig_property(_beast.star_query_map_rel_get, _beast.star_query_map_rel_set)
    __swig_setmethods__["img_mask"] = _beast.star_query_img_mask_set
    __swig_getmethods__["img_mask"] = _beast.star_query_img_mask_get
    if _newclass:
        img_mask = _swig_property(_beast.star_query_img_mask_get, _beast.star_query_img_mask_set)
    __swig_setmethods__["constptr_rel"] = _beast.star_query_constptr_rel_set
    __swig_getmethods__["constptr_rel"] = _beast.star_query_constptr_rel_get
    if _newclass:
        constptr_rel = _swig_property(_beast.star_query_constptr_rel_get, _beast.star_query_constptr_rel_set)
    __swig_setmethods__["R11"] = _beast.star_query_R11_set
    __swig_getmethods__["R11"] = _beast.star_query_R11_get
    if _newclass:
        R11 = _swig_property(_beast.star_query_R11_get, _beast.star_query_R11_set)
    __swig_setmethods__["R12"] = _beast.star_query_R12_set
    __swig_getmethods__["R12"] = _beast.star_query_R12_get
    if _newclass:
        R12 = _swig_property(_beast.star_query_R12_get, _beast.star_query_R12_set)
    __swig_setmethods__["R13"] = _beast.star_query_R13_set
    __swig_getmethods__["R13"] = _beast.star_query_R13_get
    if _newclass:
        R13 = _swig_property(_beast.star_query_R13_get, _beast.star_query_R13_set)
    __swig_setmethods__["R21"] = _beast.star_query_R21_set
    __swig_getmethods__["R21"] = _beast.star_query_R21_get
    if _newclass:
        R21 = _swig_property(_beast.star_query_R21_get, _beast.star_query_R21_set)
    __swig_setmethods__["R22"] = _beast.star_query_R22_set
    __swig_getmethods__["R22"] = _beast.star_query_R22_get
    if _newclass:
        R22 = _swig_property(_beast.star_query_R22_get, _beast.star_query_R22_set)
    __swig_setmethods__["R23"] = _beast.star_query_R23_set
    __swig_getmethods__["R23"] = _beast.star_query_R23_get
    if _newclass:
        R23 = _swig_property(_beast.star_query_R23_get, _beast.star_query_R23_set)
    __swig_setmethods__["R31"] = _beast.star_query_R31_set
    __swig_getmethods__["R31"] = _beast.star_query_R31_get
    if _newclass:
        R31 = _swig_property(_beast.star_query_R31_get, _beast.star_query_R31_set)
    __swig_setmethods__["R32"] = _beast.star_query_R32_set
    __swig_getmethods__["R32"] = _beast.star_query_R32_get
    if _newclass:
        R32 = _swig_property(_beast.star_query_R32_get, _beast.star_query_R32_set)
    __swig_setmethods__["R33"] = _beast.star_query_R33_set
    __swig_getmethods__["R33"] = _beast.star_query_R33_get
    if _newclass:
        R33 = _swig_property(_beast.star_query_R33_get, _beast.star_query_R33_set)

    def add_star(self, px, py, mag):
        return _beast.star_query_add_star(self, px, py, mag)

    def flip(self):
        return _beast.star_query_flip(self)

    def dist3(self, x1, x2, y1, y2, z1, z2):
        return _beast.star_query_dist3(self, x1, x2, y1, y2, z1, z2)

    def add_entry_rel(self, mapidx, curr_const):
        return _beast.star_query_add_entry_rel(self, mapidx, curr_const)

    def weighted_triad(self, old_s1, old_s2, new_s1, new_s2, variance):
        return _beast.star_query_weighted_triad(self, old_s1, old_s2, new_s1, new_s2, variance)

    def set_mask(self, x, y, id, score, variance):
        return _beast.star_query_set_mask(self, x, y, id, score, variance)

    def add_score(self, db_const, newid1, newid2):
        return _beast.star_query_add_score(self, db_const, newid1, newid2)

    def add_score_rel(self, oldid1, oldid2, newid1, newid2):
        return _beast.star_query_add_score_rel(self, oldid1, oldid2, newid1, newid2)

    def search(self):
        return _beast.star_query_search(self)

    def search_rel(self):
        return _beast.star_query_search_rel(self)

    def __init__(self):
        this = _beast.new_star_query()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _beast.delete_star_query
    __del__ = lambda self: None
star_query_swigregister = _beast.star_query_swigregister
star_query_swigregister(star_query)
cvar = _beast.cvar

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _beast.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _beast.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _beast.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _beast.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _beast.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _beast.SwigPyIterator_equal(self, x)

    def copy(self):
        return _beast.SwigPyIterator_copy(self)

    def next(self):
        return _beast.SwigPyIterator_next(self)

    def __next__(self):
        return _beast.SwigPyIterator___next__(self)

    def previous(self):
        return _beast.SwigPyIterator_previous(self)

    def advance(self, n):
        return _beast.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _beast.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _beast.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _beast.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _beast.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _beast.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _beast.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _beast.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorStars(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorStars, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorStars, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _beast.VectorStars_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _beast.VectorStars___nonzero__(self)

    def __bool__(self):
        return _beast.VectorStars___bool__(self)

    def __len__(self):
        return _beast.VectorStars___len__(self)

    def __getslice__(self, i, j):
        return _beast.VectorStars___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _beast.VectorStars___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _beast.VectorStars___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _beast.VectorStars___delitem__(self, *args)

    def __getitem__(self, *args):
        return _beast.VectorStars___getitem__(self, *args)

    def __setitem__(self, *args):
        return _beast.VectorStars___setitem__(self, *args)

    def pop(self):
        return _beast.VectorStars_pop(self)

    def append(self, x):
        return _beast.VectorStars_append(self, x)

    def empty(self):
        return _beast.VectorStars_empty(self)

    def size(self):
        return _beast.VectorStars_size(self)

    def swap(self, v):
        return _beast.VectorStars_swap(self, v)

    def begin(self):
        return _beast.VectorStars_begin(self)

    def end(self):
        return _beast.VectorStars_end(self)

    def rbegin(self):
        return _beast.VectorStars_rbegin(self)

    def rend(self):
        return _beast.VectorStars_rend(self)

    def clear(self):
        return _beast.VectorStars_clear(self)

    def get_allocator(self):
        return _beast.VectorStars_get_allocator(self)

    def pop_back(self):
        return _beast.VectorStars_pop_back(self)

    def erase(self, *args):
        return _beast.VectorStars_erase(self, *args)

    def __init__(self, *args):
        this = _beast.new_VectorStars(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _beast.VectorStars_push_back(self, x)

    def front(self):
        return _beast.VectorStars_front(self)

    def back(self):
        return _beast.VectorStars_back(self)

    def assign(self, n, x):
        return _beast.VectorStars_assign(self, n, x)

    def resize(self, *args):
        return _beast.VectorStars_resize(self, *args)

    def insert(self, *args):
        return _beast.VectorStars_insert(self, *args)

    def reserve(self, n):
        return _beast.VectorStars_reserve(self, n)

    def capacity(self):
        return _beast.VectorStars_capacity(self)
    __swig_destroy__ = _beast.delete_VectorStars
    __del__ = lambda self: None
VectorStars_swigregister = _beast.VectorStars_swigregister
VectorStars_swigregister(VectorStars)

class VectorInts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInts, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _beast.VectorInts_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _beast.VectorInts___nonzero__(self)

    def __bool__(self):
        return _beast.VectorInts___bool__(self)

    def __len__(self):
        return _beast.VectorInts___len__(self)

    def __getslice__(self, i, j):
        return _beast.VectorInts___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _beast.VectorInts___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _beast.VectorInts___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _beast.VectorInts___delitem__(self, *args)

    def __getitem__(self, *args):
        return _beast.VectorInts___getitem__(self, *args)

    def __setitem__(self, *args):
        return _beast.VectorInts___setitem__(self, *args)

    def pop(self):
        return _beast.VectorInts_pop(self)

    def append(self, x):
        return _beast.VectorInts_append(self, x)

    def empty(self):
        return _beast.VectorInts_empty(self)

    def size(self):
        return _beast.VectorInts_size(self)

    def swap(self, v):
        return _beast.VectorInts_swap(self, v)

    def begin(self):
        return _beast.VectorInts_begin(self)

    def end(self):
        return _beast.VectorInts_end(self)

    def rbegin(self):
        return _beast.VectorInts_rbegin(self)

    def rend(self):
        return _beast.VectorInts_rend(self)

    def clear(self):
        return _beast.VectorInts_clear(self)

    def get_allocator(self):
        return _beast.VectorInts_get_allocator(self)

    def pop_back(self):
        return _beast.VectorInts_pop_back(self)

    def erase(self, *args):
        return _beast.VectorInts_erase(self, *args)

    def __init__(self, *args):
        this = _beast.new_VectorInts(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _beast.VectorInts_push_back(self, x)

    def front(self):
        return _beast.VectorInts_front(self)

    def back(self):
        return _beast.VectorInts_back(self)

    def assign(self, n, x):
        return _beast.VectorInts_assign(self, n, x)

    def resize(self, *args):
        return _beast.VectorInts_resize(self, *args)

    def insert(self, *args):
        return _beast.VectorInts_insert(self, *args)

    def reserve(self, n):
        return _beast.VectorInts_reserve(self, n)

    def capacity(self):
        return _beast.VectorInts_capacity(self)
    __swig_destroy__ = _beast.delete_VectorInts
    __del__ = lambda self: None
VectorInts_swigregister = _beast.VectorInts_swigregister
VectorInts_swigregister(VectorInts)

class VectorDoubles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDoubles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDoubles, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _beast.VectorDoubles_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _beast.VectorDoubles___nonzero__(self)

    def __bool__(self):
        return _beast.VectorDoubles___bool__(self)

    def __len__(self):
        return _beast.VectorDoubles___len__(self)

    def __getslice__(self, i, j):
        return _beast.VectorDoubles___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _beast.VectorDoubles___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _beast.VectorDoubles___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _beast.VectorDoubles___delitem__(self, *args)

    def __getitem__(self, *args):
        return _beast.VectorDoubles___getitem__(self, *args)

    def __setitem__(self, *args):
        return _beast.VectorDoubles___setitem__(self, *args)

    def pop(self):
        return _beast.VectorDoubles_pop(self)

    def append(self, x):
        return _beast.VectorDoubles_append(self, x)

    def empty(self):
        return _beast.VectorDoubles_empty(self)

    def size(self):
        return _beast.VectorDoubles_size(self)

    def swap(self, v):
        return _beast.VectorDoubles_swap(self, v)

    def begin(self):
        return _beast.VectorDoubles_begin(self)

    def end(self):
        return _beast.VectorDoubles_end(self)

    def rbegin(self):
        return _beast.VectorDoubles_rbegin(self)

    def rend(self):
        return _beast.VectorDoubles_rend(self)

    def clear(self):
        return _beast.VectorDoubles_clear(self)

    def get_allocator(self):
        return _beast.VectorDoubles_get_allocator(self)

    def pop_back(self):
        return _beast.VectorDoubles_pop_back(self)

    def erase(self, *args):
        return _beast.VectorDoubles_erase(self, *args)

    def __init__(self, *args):
        this = _beast.new_VectorDoubles(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _beast.VectorDoubles_push_back(self, x)

    def front(self):
        return _beast.VectorDoubles_front(self)

    def back(self):
        return _beast.VectorDoubles_back(self)

    def assign(self, n, x):
        return _beast.VectorDoubles_assign(self, n, x)

    def resize(self, *args):
        return _beast.VectorDoubles_resize(self, *args)

    def insert(self, *args):
        return _beast.VectorDoubles_insert(self, *args)

    def reserve(self, n):
        return _beast.VectorDoubles_reserve(self, n)

    def capacity(self):
        return _beast.VectorDoubles_capacity(self)
    __swig_destroy__ = _beast.delete_VectorDoubles
    __del__ = lambda self: None
VectorDoubles_swigregister = _beast.VectorDoubles_swigregister
VectorDoubles_swigregister(VectorDoubles)

# This file is compatible with both classic and new-style classes.


