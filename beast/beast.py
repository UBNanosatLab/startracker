# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_beast', [dirname(__file__)])
        except ImportError:
            import _beast
            return _beast
        if fp is not None:
            try:
                _mod = imp.load_module('_beast', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _beast = swig_import_helper()
    del swig_import_helper
else:
    import _beast
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _beast.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _beast.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _beast.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _beast.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _beast.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _beast.SwigPyIterator_equal(self, x)

    def copy(self):
        return _beast.SwigPyIterator_copy(self)

    def next(self):
        return _beast.SwigPyIterator_next(self)

    def __next__(self):
        return _beast.SwigPyIterator___next__(self)

    def previous(self):
        return _beast.SwigPyIterator_previous(self)

    def advance(self, n):
        return _beast.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _beast.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _beast.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _beast.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _beast.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _beast.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _beast.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _beast.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorStars(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorStars, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorStars, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _beast.VectorStars_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _beast.VectorStars___nonzero__(self)

    def __bool__(self):
        return _beast.VectorStars___bool__(self)

    def __len__(self):
        return _beast.VectorStars___len__(self)

    def __getslice__(self, i, j):
        return _beast.VectorStars___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _beast.VectorStars___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _beast.VectorStars___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _beast.VectorStars___delitem__(self, *args)

    def __getitem__(self, *args):
        return _beast.VectorStars___getitem__(self, *args)

    def __setitem__(self, *args):
        return _beast.VectorStars___setitem__(self, *args)

    def pop(self):
        return _beast.VectorStars_pop(self)

    def append(self, x):
        return _beast.VectorStars_append(self, x)

    def empty(self):
        return _beast.VectorStars_empty(self)

    def size(self):
        return _beast.VectorStars_size(self)

    def swap(self, v):
        return _beast.VectorStars_swap(self, v)

    def begin(self):
        return _beast.VectorStars_begin(self)

    def end(self):
        return _beast.VectorStars_end(self)

    def rbegin(self):
        return _beast.VectorStars_rbegin(self)

    def rend(self):
        return _beast.VectorStars_rend(self)

    def clear(self):
        return _beast.VectorStars_clear(self)

    def get_allocator(self):
        return _beast.VectorStars_get_allocator(self)

    def pop_back(self):
        return _beast.VectorStars_pop_back(self)

    def erase(self, *args):
        return _beast.VectorStars_erase(self, *args)

    def __init__(self, *args):
        this = _beast.new_VectorStars(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _beast.VectorStars_push_back(self, x)

    def front(self):
        return _beast.VectorStars_front(self)

    def back(self):
        return _beast.VectorStars_back(self)

    def assign(self, n, x):
        return _beast.VectorStars_assign(self, n, x)

    def resize(self, *args):
        return _beast.VectorStars_resize(self, *args)

    def insert(self, *args):
        return _beast.VectorStars_insert(self, *args)

    def reserve(self, n):
        return _beast.VectorStars_reserve(self, n)

    def capacity(self):
        return _beast.VectorStars_capacity(self)
    __swig_destroy__ = _beast.delete_VectorStars
    __del__ = lambda self: None
VectorStars_swigregister = _beast.VectorStars_swigregister
VectorStars_swigregister(VectorStars)

class Line(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Line, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _beast.Line_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _beast.Line___nonzero__(self)

    def __bool__(self):
        return _beast.Line___bool__(self)

    def __len__(self):
        return _beast.Line___len__(self)

    def __getslice__(self, i, j):
        return _beast.Line___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _beast.Line___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _beast.Line___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _beast.Line___delitem__(self, *args)

    def __getitem__(self, *args):
        return _beast.Line___getitem__(self, *args)

    def __setitem__(self, *args):
        return _beast.Line___setitem__(self, *args)

    def pop(self):
        return _beast.Line_pop(self)

    def append(self, x):
        return _beast.Line_append(self, x)

    def empty(self):
        return _beast.Line_empty(self)

    def size(self):
        return _beast.Line_size(self)

    def swap(self, v):
        return _beast.Line_swap(self, v)

    def begin(self):
        return _beast.Line_begin(self)

    def end(self):
        return _beast.Line_end(self)

    def rbegin(self):
        return _beast.Line_rbegin(self)

    def rend(self):
        return _beast.Line_rend(self)

    def clear(self):
        return _beast.Line_clear(self)

    def get_allocator(self):
        return _beast.Line_get_allocator(self)

    def pop_back(self):
        return _beast.Line_pop_back(self)

    def erase(self, *args):
        return _beast.Line_erase(self, *args)

    def __init__(self, *args):
        this = _beast.new_Line(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _beast.Line_push_back(self, x)

    def front(self):
        return _beast.Line_front(self)

    def back(self):
        return _beast.Line_back(self)

    def assign(self, n, x):
        return _beast.Line_assign(self, n, x)

    def resize(self, *args):
        return _beast.Line_resize(self, *args)

    def insert(self, *args):
        return _beast.Line_insert(self, *args)

    def reserve(self, n):
        return _beast.Line_reserve(self, n)

    def capacity(self):
        return _beast.Line_capacity(self)
    __swig_destroy__ = _beast.delete_Line
    __del__ = lambda self: None
Line_swigregister = _beast.Line_swigregister
Line_swigregister(Line)

class Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _beast.Array_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _beast.Array___nonzero__(self)

    def __bool__(self):
        return _beast.Array___bool__(self)

    def __len__(self):
        return _beast.Array___len__(self)

    def __getslice__(self, i, j):
        return _beast.Array___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _beast.Array___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _beast.Array___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _beast.Array___delitem__(self, *args)

    def __getitem__(self, *args):
        return _beast.Array___getitem__(self, *args)

    def __setitem__(self, *args):
        return _beast.Array___setitem__(self, *args)

    def pop(self):
        return _beast.Array_pop(self)

    def append(self, x):
        return _beast.Array_append(self, x)

    def empty(self):
        return _beast.Array_empty(self)

    def size(self):
        return _beast.Array_size(self)

    def swap(self, v):
        return _beast.Array_swap(self, v)

    def begin(self):
        return _beast.Array_begin(self)

    def end(self):
        return _beast.Array_end(self)

    def rbegin(self):
        return _beast.Array_rbegin(self)

    def rend(self):
        return _beast.Array_rend(self)

    def clear(self):
        return _beast.Array_clear(self)

    def get_allocator(self):
        return _beast.Array_get_allocator(self)

    def pop_back(self):
        return _beast.Array_pop_back(self)

    def erase(self, *args):
        return _beast.Array_erase(self, *args)

    def __init__(self, *args):
        this = _beast.new_Array(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _beast.Array_push_back(self, x)

    def front(self):
        return _beast.Array_front(self)

    def back(self):
        return _beast.Array_back(self)

    def assign(self, n, x):
        return _beast.Array_assign(self, n, x)

    def resize(self, *args):
        return _beast.Array_resize(self, *args)

    def insert(self, *args):
        return _beast.Array_insert(self, *args)

    def reserve(self, n):
        return _beast.Array_reserve(self, n)

    def capacity(self):
        return _beast.Array_capacity(self)
    __swig_destroy__ = _beast.delete_Array
    __del__ = lambda self: None
Array_swigregister = _beast.Array_swigregister
Array_swigregister(Array)

class constellation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, constellation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, constellation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["s"] = _beast.constellation_s_set
    __swig_getmethods__["s"] = _beast.constellation_s_get
    if _newclass:
        s = _swig_property(_beast.constellation_s_get, _beast.constellation_s_set)
    __swig_setmethods__["p"] = _beast.constellation_p_set
    __swig_getmethods__["p"] = _beast.constellation_p_get
    if _newclass:
        p = _swig_property(_beast.constellation_p_get, _beast.constellation_p_set)
    __swig_setmethods__["last"] = _beast.constellation_last_set
    __swig_getmethods__["last"] = _beast.constellation_last_get
    if _newclass:
        last = _swig_property(_beast.constellation_last_get, _beast.constellation_last_set)

    def __init__(self):
        this = _beast.new_constellation()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _beast.delete_constellation
    __del__ = lambda self: None
constellation_swigregister = _beast.constellation_swigregister
constellation_swigregister(constellation)

class star(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, star, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, star, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _beast.star_x_set
    __swig_getmethods__["x"] = _beast.star_x_get
    if _newclass:
        x = _swig_property(_beast.star_x_get, _beast.star_x_set)
    __swig_setmethods__["y"] = _beast.star_y_set
    __swig_getmethods__["y"] = _beast.star_y_get
    if _newclass:
        y = _swig_property(_beast.star_y_get, _beast.star_y_set)
    __swig_setmethods__["z"] = _beast.star_z_set
    __swig_getmethods__["z"] = _beast.star_z_get
    if _newclass:
        z = _swig_property(_beast.star_z_get, _beast.star_z_set)
    __swig_setmethods__["mag"] = _beast.star_mag_set
    __swig_getmethods__["mag"] = _beast.star_mag_get
    if _newclass:
        mag = _swig_property(_beast.star_mag_get, _beast.star_mag_set)
    __swig_setmethods__["starnum"] = _beast.star_starnum_set
    __swig_getmethods__["starnum"] = _beast.star_starnum_get
    if _newclass:
        starnum = _swig_property(_beast.star_starnum_get, _beast.star_starnum_set)
    __swig_setmethods__["magnum"] = _beast.star_magnum_set
    __swig_getmethods__["magnum"] = _beast.star_magnum_get
    if _newclass:
        magnum = _swig_property(_beast.star_magnum_get, _beast.star_magnum_set)
    __swig_setmethods__["hipid"] = _beast.star_hipid_set
    __swig_getmethods__["hipid"] = _beast.star_hipid_get
    if _newclass:
        hipid = _swig_property(_beast.star_hipid_get, _beast.star_hipid_set)

    def __init__(self):
        this = _beast.new_star()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _beast.delete_star
    __del__ = lambda self: None
star_swigregister = _beast.star_swigregister
star_swigregister(star)


def load_db():
    return _beast.load_db()
load_db = _beast.load_db

def close_db():
    return _beast.close_db()
close_db = _beast.close_db

def compare_mag(s1, s2):
    return _beast.compare_mag(s1, s2)
compare_mag = _beast.compare_mag

def compare_starnum(s1, s2):
    return _beast.compare_starnum(s1, s2)
compare_starnum = _beast.compare_starnum
class star_query(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, star_query, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, star_query, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stars"] = _beast.star_query_stars_set
    __swig_getmethods__["stars"] = _beast.star_query_stars_get
    if _newclass:
        stars = _swig_property(_beast.star_query_stars_get, _beast.star_query_stars_set)
    __swig_setmethods__["pilot"] = _beast.star_query_pilot_set
    __swig_getmethods__["pilot"] = _beast.star_query_pilot_get
    if _newclass:
        pilot = _swig_property(_beast.star_query_pilot_get, _beast.star_query_pilot_set)
    __swig_setmethods__["im_0"] = _beast.star_query_im_0_set
    __swig_getmethods__["im_0"] = _beast.star_query_im_0_get
    if _newclass:
        im_0 = _swig_property(_beast.star_query_im_0_get, _beast.star_query_im_0_set)
    __swig_setmethods__["im_1"] = _beast.star_query_im_1_set
    __swig_getmethods__["im_1"] = _beast.star_query_im_1_get
    if _newclass:
        im_1 = _swig_property(_beast.star_query_im_1_get, _beast.star_query_im_1_set)
    __swig_setmethods__["im_2"] = _beast.star_query_im_2_set
    __swig_getmethods__["im_2"] = _beast.star_query_im_2_get
    if _newclass:
        im_2 = _swig_property(_beast.star_query_im_2_get, _beast.star_query_im_2_set)
    __swig_setmethods__["im_3"] = _beast.star_query_im_3_set
    __swig_getmethods__["im_3"] = _beast.star_query_im_3_get
    if _newclass:
        im_3 = _swig_property(_beast.star_query_im_3_get, _beast.star_query_im_3_set)
    __swig_setmethods__["db_0"] = _beast.star_query_db_0_set
    __swig_getmethods__["db_0"] = _beast.star_query_db_0_get
    if _newclass:
        db_0 = _swig_property(_beast.star_query_db_0_get, _beast.star_query_db_0_set)
    __swig_setmethods__["db_1"] = _beast.star_query_db_1_set
    __swig_getmethods__["db_1"] = _beast.star_query_db_1_get
    if _newclass:
        db_1 = _swig_property(_beast.star_query_db_1_get, _beast.star_query_db_1_set)
    __swig_setmethods__["db_2"] = _beast.star_query_db_2_set
    __swig_getmethods__["db_2"] = _beast.star_query_db_2_get
    if _newclass:
        db_2 = _swig_property(_beast.star_query_db_2_get, _beast.star_query_db_2_set)
    __swig_setmethods__["db_3"] = _beast.star_query_db_3_set
    __swig_getmethods__["db_3"] = _beast.star_query_db_3_get
    if _newclass:
        db_3 = _swig_property(_beast.star_query_db_3_get, _beast.star_query_db_3_set)

    def add_star(self, px, py, mag):
        return _beast.star_query_add_star(self, px, py, mag)

    def sort_mag(self):
        return _beast.star_query_sort_mag(self)

    def sort_starnum(self):
        return _beast.star_query_sort_starnum(self)

    def querydb(self, a, b, c, d):
        return _beast.star_query_querydb(self, a, b, c, d)

    def search_all(self):
        return _beast.star_query_search_all(self)

    def search_pilot(self):
        return _beast.star_query_search_pilot(self)

    def __init__(self):
        this = _beast.new_star_query()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _beast.delete_star_query
    __del__ = lambda self: None
star_query_swigregister = _beast.star_query_swigregister
star_query_swigregister(star_query)
cvar = _beast.cvar

# This file is compatible with both classic and new-style classes.


